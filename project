
#import statements
import numpy as np
import cv2
import matplotlib.pyplot as plt


#reading images
parking_with_car=cv2.imread('PicsArt_03-22-08.04.20.jpg',1)
parking_without_car=cv2.imread('PicsArt_03-22-07.49.43.jpg',1)


#displaying outputs
cv2.imshow('img1',parking_without_car)
cv2.imshow('img2',parking_with_car)

#converting the images into grey
img1grayscaled=cv2.cvtColor(parking_without_car,cv2.COLOR_BGR2GRAY)
img2grayscaled=cv2.cvtColor(parking_with_car,cv2.COLOR_BGR2GRAY)


#display image after converting it into grey
cv2.imshow('gray img1',img1grayscaled)
cv2.imshow('gray img2',img2grayscaled)


#thresholding image(using adaptive threshold)
retval1,threshold1=cv2.threshold(img1grayscaled,0,127,cv2.THRESH_BINARY)
th21=cv2.adaptiveThreshold(img1grayscaled,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,3)
th31=cv2.adaptiveThreshold(img1grayscaled,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,3)
retval2,threshold2=cv2.threshold(img2grayscaled,0,127,cv2.THRESH_BINARY)
th22=cv2.adaptiveThreshold(img2grayscaled,255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,3)
th32=cv2.adaptiveThreshold(img2grayscaled,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,3)



#displaying threshold images
#cv2.imshow('gray th11',th21)
cv2.imshow('gray th21',th31)
#cv2.imshow('gray th12',th22)
cv2.imshow('gray th22',th32)

#dilation of image
kernal1=np.ones((3,3),np.uint8)
dil11=cv2.dilate(th21,kernal1,iterations=1)
dil21=cv2.dilate(th31,kernal1,iterations=1)
gradient1 = cv2.morphologyEx(th21, cv2.MORPH_GRADIENT, kernal1)
kernal2=np.ones((3,3),np.uint8)
dil12=cv2.dilate(th22,kernal2,iterations=1)
dil22=cv2.dilate(th32,kernal2,iterations=1)
gradient2 = cv2.morphologyEx(th22, cv2.MORPH_GRADIENT, kernal2)


#displaying dilated images
cv2.imshow('dial th11',dil11)
#cv2.imshow('dial th21',dil21)
cv2.imshow('dial th12',dil12)
#cv2.imshow('dial th22',dil22)
cv2.imshow('gradient 1',gradient1)
cv2.imshow('gradient 2',gradient2)

#edge detection
edges1=cv2.Canny(img1grayscaled,100,200)
plt.subplot(122),plt.imshow(edges1,cmap='gray')
plt.title('Edges'),plt.xticks([]),plt.yticks([])
plt.show()
##edges2=cv2.Canny(img2grayscaled,100,200)
##plt.subplot(122),plt.imshow(edges2,cmap='gray')
##plt.title('Edges'),plt.xticks([]),plt.yticks([])
##plt.show()



#template
#img = cv2.imread('',0)
##img2 = img2grayscaled.copy()
##template = cv2.imread('download.png',0)
##w, h = template.shape[::-1]

# All the 6 methods for comparison in a list
##methods = ['cv2.TM_CCOEFF', 'cv2.TM_CCOEFF_NORMED', 'cv2.TM_CCORR',
##            'cv2.TM_CCORR_NORMED', 'cv2.TM_SQDIFF', 'cv2.TM_SQDIFF_NORMED']
##
##for meth in methods:
##    img2grayscaled = img2.copy()
##    method = eval(meth)
  # Apply template Matching
##    res = cv2.matchTemplate(img2grayscaled,template,method)
##    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(res)
##
##    # If the method is TM_SQDIFF or TM_SQDIFF_NORMED, take minimum
##    if method in [cv2.TM_SQDIFF, cv2.TM_SQDIFF_NORMED]:
##        top_left = min_loc
##    else:
##        top_left = max_loc
##    bottom_right = (top_left[0] + w, top_left[1] + h)
##
##    cv2.rectangle(img2grayscaled,top_left, bottom_right, 255, 2)
##
##    plt.subplot(121),plt.imshow(res,cmap = 'gray')
##    plt.title('Matching Result'), plt.xticks([]), plt.yticks([])
##    plt.subplot(122),plt.imshow(img2grayscaled,cmap = 'gray')
##    plt.title('Detected Point'), plt.xticks([]), plt.yticks([])
##    plt.suptitle(meth)
##
##    plt.show()





#plt.plot([50,100],[80,100],'c',linewidth=5)
#plt.show()
#add=cv2.addWeighted(img,0.6,img1,0.4,0)
#img[50:100,50:100]=[123,234,123]
#face=img[37:67,34:89]
#img[0:30,0:55]=face
#add=cv2.addWeighted(img[0:300,0:300],0.6,img1[0:300,0:300],0.4,0)
#add=cv2.add(img[0:300,0:300],img1[0:300,0:300])
#cv2.imshow('add',add)
#rows,cols,channels=img1.shape
#roi=img1[0:rows,0:cols]
#img2gray=cv2.cvtColor(img1,cv2.COLOR_BGR2GRAY)
#retval,threshold=cv2.threshold(img,90,255,cv2.THRESH_BINARY)
#mask_inv=cv2.bitwise_not(mask)
#img_bg=cv2.bitwise_and(roi,roi,mask=mask_inv)
#img1_bg=cv2.bitwise_and(img1,img1,mask=mask)
#dst=cv2.add(img_bg,img1_bg)
#img[0:rows,0:cols]=dst

#grayscaled=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

#retval2,threshold2=cv2.threshold(grayscaled,90,255,cv2.THRESH_BINARY)
#gaus=cv2.adaptiveThreshold(grayscaled,255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,115,1)



#cv2.imshow('res',img)
#cv2.imshow('threshold',threshold)
#cv2.imshow('threshold',threshold2)
#cv2.imshow('gaus',gaus)
#cv2.imshow('dst',dst)

cv2.waitKey(0)
cv2.destroyAllWindows()
